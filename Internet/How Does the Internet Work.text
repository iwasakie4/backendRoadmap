http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm

インターネットアドレス
グローバルネットの為PCは一意アドレスが必須
nnn.nnn.nnn.nnnで、nnn は 0 ～ 255 の数字


プロトコル スタックとパケット(ここは参照モデルで勉強したほうが良さそう)
OSI参照モデル (Open Systems Interconnection)
https://www.itmanage.co.jp/column/osi-reference-model/
コンピュータネットワークで利用されている多数のプロトコルについて、それぞれの役割を分類し、明確化するためのモデル
「プロトコルに必要な機能はなにか」を中心に記述
国際標準化機構（ISO）が作成
以下の層の頭文字を取って【あぷせとね物】でよく覚えられる
第7層：アプリケーション層
第6層：プレゼンテーション層
第5層：セッション層
第4層：トランスポート層
第3層：ネットワーク層
第2層：データリンク層
第1層：物理層
送信側は7層から処理始まり1層でインターネットに流し
受け取り側は逆に1層で受信して７層へ処理していく

第7層：アプリケーション層
領域 : ソフト
プロトコル : HTTP,FTP,DNS,SMTP,POPなど
概要 : 利用者が使うアプリケーションが通信できるようにするため約束事を定義
利用例 : www,メール

第6層：プレゼンテーション層
領域 : ソフト
プロトコル : SMTP,FTP,Telnetなど
概要 : 通信を行う上でのデータや画像などのデータ形式の約束事を定義(暗号も含む)
利用例 : HTML(文字コードなど)

第5層：セッション層
領域 : ソフト
プロトコル : TLS,NetBIOSなど
概要 : 通信を確立（開始・終了）するための約束事を定義
利用例 : 	HTTPS(ssl)

第4層：トランスポート層
領域 : ネット
プロトコル : 	TCP,UDP,NetWare/IPなど
概要 : 	通信する際の信頼性についての約束事を定義
利用例 : TCP,UDP(ウェブサーバーがDBに更新するなど)

第3層：ネットワーク層
領域 : ネット
プロトコル : IP,ARP,RARP,ICMPなど
概要 : データを目的地まで届けるための約束事を定義(最適ルート構築など)
利用例 : IP

第2層：データリンク層
領域 : ネット
プロトコル : PPP,Ethernetなど
概要 : 隣接する機器間でデータの送受信を行うための約束事を定義(ブリッジなど)
利用例 : Ethernet

第1層：物理層
領域 : ハード
プロトコル : RS-232,UTP,無線
概要 : 	電気信号などに変換するための約束事を定義
利用例 : UTPケーブル,光ファイバーケーブル

OSI 参照モデルの具体例 FTPs
https://milestone-of-se.nesuke.com/nw-basic/as-nw-engineer/osi-reference-model-and-ip-set-model/

第7層：アプリケーション層 FTP
実際に行いたいPC間のデータ転送を実行

第6層：プレゼンテーション層 FTPS
windowsの文字列をlinuxに変換

第5層：セッション層 TLS
通信機器間の承認及び暗号化

第4層：トランスポート層 TCP
通信期間の通信ステータス管理

第3層：ネットワーク層 IP
通信経路を決定

第2層：データリンク層 Ethernet
デジタル変換

第1層：データリンク層 UTP or 光ケーブル
ケーブルの利用環境に応じて電気信号変換


TCP/IP
ネットワークプロトコル群の総称
OSI参照モデルでは実装するにあたって融通が利かなかったり、複雑すぎたりと様々な問題を
解決するためにシンプルな構造にしたもの。現在のネットワーク通信ではTCP/IPが用いられます
「プロトコルをどのように実装したらよいか」を中心に記述されている
覚え方は上の層が人間が利用するアプリケーション
中間層がアプリケーション通信をする際の補助的な役割を果たす
下層が電気信号などの物理的な信号に対して送られる暗号
TCP/IPは4つの階層のプロトコルが正常に機能して初めて通信ができます
米国国防高等研究計画局（DARPA)が作成

第4層：アプリケーション層
プロトコル : HTTP,HTTPS,SMTP,POP3,IMAP4,DHCP,DNSなど
利用例 : Webサイト閲覧、メール、ファイル転送など

第層：3層
プロトコル : トランスポート層
概要 : TCP,UDP,NetWare/IPなど
利用例 : TCP/UDP（データを適切なアプリケーションへ振り分け）

第層：2層
プロトコル : インターネット層
概要 : TCP,UDP,NetWare/IPなど
利用例 : TCP/UDP （データを適切なアプリケーションへ振り分け）

第層：1層
プロトコル : ネットワーク インターフェイス層
概要 : Ethernet
利用例 : LAN

OSI参照モデルとTCP/IPモデルの違い
やりたいことは同じだけどルールが二つあって
OSI参照モデルは名目上の標準で
TCP/IPはみんなが使っている事実上の標準ってイメージ

ネットワーキング インフラストラクチャ(これも上の記載でおおよそ把握)
Windows traceroute
linux tracert
コマンドというものがありパケットが経由したルーターを一覧表示できるのでこれは活用していきたい

インターネットインフラ
相互接続する多数の大規模なネットワークで構成
ネットワーク サービス プロバイダーまたはNSPとして知られる
NSP には、UUNet、CerfNet、IBM、BBN Planet、SprintNet、PSINet などがあります
これらのネットワークは互いにピアリングして、パケット トラフィックを交換します
各 NSP は、3 つの ネットワーク アクセス ポイントまたはNAPに接続する必要があります
NSP は、メトロポリタン エリア エクスチェンジまたはMAEでも相互接続します。
実際に細かく説明書くことはサイズや複雑さ、絶え間ない構造変化の為ほぼ不可能で
概要だけ少し知っていればよい。

DHCPサーバー
LAN上のパソコンなどが起動すると、その都度、IPアドレスなどのネットワーク利用に必要な設定情報を、本商品から各パソコンなどに自動的に割り当てる機能

インターネット ルーティング階層
ルーターはパケット スイッチです
ネットワーク間でパケットをルーティングするためにネットワーク間に接続されます
各ルーターは、そのサブネットワークと、使用する IP アドレスを認識しています。
ルーターは通常、その「上」にある IP アドレスを認識していません
パケットがルーターに到着すると、ルーターは発信元コンピューターの IP プロトコル層によってそこに置かれた IP アドレスを調べます。
ルーターはルーティング テーブルをチェックします。
IP アドレスを含むネットワークが見つかった場合、パケットはそのネットワークに送信されます。
IP アドレスを含むネットワークが見つからない場合、ルーターはデフォルト ルートでパケットを送信します。
通常は、バックボーン階層を上って次のルーターに送信します。
次のルーターがパケットの送信先を知っていることを願っています。
そうでない場合、パケットはバックボーンに到達するまで上向きにル​​ーティングされます。
バックボーンに接続されたルーターは最大のルーティング テーブルを保持し、
ここでパケットは正しいバックボーンにルーティングされ、そこで「下向き」の旅を開始します。

DNS
インターネットに接続された多くのコンピューターは、DNS データベースのホスト部分と
他のユーザーがそれにアクセスできるようにするソフトウェアをホストしています
これらのコンピュータは DNS サーバーと呼ばれます
データベース全体を含む DNS サーバーはありません
それらにはそのサブセットのみが含まれています
別のコンピュータが要求したドメイン名が DNS サーバーに含まれていない場合
DNS サーバーは要求元のコンピュータを別の DNS サーバーにリダイレクトします
ドメイン ネーム サービスは、IP ルーティング階層と同様の階層として構造化されています。
名前解決を要求しているコンピューターは、要求内のドメイン名を解決できる DNS サーバーが見つかるまで、階層の「上」にリダイレクトされます。
インターネット接続をセットアップする場合 (LAN や Windows のダイヤルアップ ネットワークなど)、
通常、1 つのプライマリ(初めに問い合わせする) DNS サーバーと 1 つ以上のセカンダリ DNS サーバーがインストールの一部として指定されます。。
たとえば、Web ブラウザーに Web アドレスを入力すると、ブラウザーは最初にプライマリ DNS サーバーに接続します。
入力したドメイン名の IP アドレスを取得した後、ブラウザーは対象のコンピューターに接続し、必要な Web ページを要求します。
実際にipconfig /allでDNSサーバーのipを確認すると 192.168.???.??になっている
これはルーターが一度検索したドメイン名をもっていて簡易的にDNSサーバーとして稼働しているから

アプリケーション プロトコル: HTTP と World Wide Web
Web ブラウザに URL を入力すると、次のようになります。

URL にドメイン名が含まれている場合、ブラウザはまずドメイン ネーム サーバーに接続し、Web サーバーの対応する IP アドレスを取得します。
Web ブラウザーは Web サーバーに接続し、目的の Web ページに対する HTTP 要求を (プロトコル スタック経由で) 送信します。
Web サーバーは要求を受け取り、目的のページをチェックします。ページが存在する場合、Web サーバーはそれを送信します。要求されたページが見つからない場合、サーバーは HTTP 404 エラー メッセージを送信します。(404 は、Web サーフィンをしたことがある人なら誰でも知っているように、「ページが見つかりません」という意味です。)
Web ブラウザがページを受信し、接続が閉じられます。
次にブラウザはページを解析し、Web ページを完成させるために必要な他のページ要素を探します。これらには通常、画像、アプレットなどが含まれます。
必要な要素ごとに、ブラウザは要素ごとに追加の接続とサーバーへの HTTP 要求を行います。
ブラウザがすべての画像、アプレットなどの読み込みを完了すると、ページはブラウザ ウィンドウに完全に読み込まれます。
インターネット プロトコルは、Request For Commentsまたは RFCと呼ばれるインターネット ドキュメントによって指定されています

アプリケーション プロトコル: SMTP および電子メール
SMTP もテキスト ベースのプロトコルですが、HTTP とは異なり、SMTP は接続指向です。
HTTPよりも複雑です。
メール クライアント (Netscape Mail、Lotus Notes、Microsoft Outlook など) は、デフォルトのメール サーバーへの接続を開きます。通常、メール サーバーの IP アドレスまたはドメイン名は、メール クライアントのインストール時に設定されます。
メール サーバーは、自身を識別するために常に最初のメッセージを送信します。
クライアントは、サーバーが 250 OK メッセージで応答する SMTP HELO コマンドを送信します。
クライアントがメールをチェックしているか、メールを送信しているかなどに応じて、適切な SMTP コマンドがサーバーに送信され、サーバーはそれに応じて応答します。
この要求/応答トランザクションは、クライアントが SMTP QUIT コマンドを送信するまで続きます。サーバーは別れを告げ、接続は閉じられます。

SMTP クライアントと SMTP サーバー間の単純な「会話」例
R:サーバー (受信者) によって送信されたメッセージ
S:クライアント (送信者) によって送信されたメッセージ
ホスト USC-ISIF の Smith によって送信されたメールを示しています。
ホスト BBN-UNIX の Jones、Green、および Brown。ここでは、
ホスト USC-ISIF は、ホスト BBN-UNIX に直接連絡します。
メールはジョーンズとブラウンに受け入れられました。
Greenにはメールボックスがありません
ホスト BBN-UNIX。
RCPT TO は送信コマンド

      -------------------------------------------------------------

         R:220 BBN-UNIX.ARPA かんたんメール転送サービス対応
         S: こんにちは USC-ISIF.ARPA
         R: 250 BBN-UNIX.ARPA

         S: メールの送信元:<Smith@USC-ISIF.ARPA>
         R: 250 OK

         S: RCPT TO:<Jones@BBN-UNIX.ARPA>
         R: 250 OK

         S: RCPT TO:<Green@BBN-UNIX.ARPA>
         R:550 そのようなユーザーはいません

         S: RCPT TO:<Brown@BBN-UNIX.ARPA>
         R: 250 OK

         S: データ
         R:354 メール入力開始; <CRLF>.<CRLF>で終わる
         S: 何とか何とか...
         S: ...など。などなど
         S: .
         R: 250 OK

         S: やめる
         R: 221 BBN-UNIX.ARPA サービスが送信チャネルを閉じています
この SMTP トランザクションは、SMTP を指定する RFC 821 から取得されます。

伝送制御プロトコル
プロトコル スタックのアプリケーション層の下には、TCP 層があります。
TCP は、宛先コンピューター上の正しいアプリケーションにアプリケーション プロトコルをルーティングする役割を果たします。
これを実現するために、ポート番号が使用されます

*チャンク
送信には二種類方法があって圧縮形式とチャック形式
圧縮は一度で必要な情報を全て行うときに利用
チャンクは巨大なファイルを分割して送信するときに使用
HTTPではボディを複数のチャンクに分割それを送信する(ヘッダーを各チャンクにつける)
最後にチャンクが空の物を送り送信終了とする

TCP は次のように機能します。

TCP 層がアプリケーション層プロトコル データを上から受信すると、データを「チャンク」に分割し
TCP ヘッダー（ポート番号)を各「チャンク」に追加します。
TCP 層がその下の IP 層からパケットを受信すると、TCP 層はパケットから TCP ヘッダー データを取り除きデータを再構築し
TCP から取得したポート番号を使用して正しいアプリケーションにデータを送信します。
TCP はテキスト プロトコルではありません。
TCP は、接続指向で信頼性の高いバイト ストリーム サービスです
