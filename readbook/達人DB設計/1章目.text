メモ

OODB 
オブジェクト指向データベース
javaやC++のオブジェクトを管理する考えをもつものからの発展

XMLデータベース
XMLで管理する
RDBが苦手とする階層構造のデータの扱いを得意とする。

key-value
keyとvalueだけの組み合わせで表現する
データの問い合わせを高速かすることを目的とする
反面複雑なことが苦手

階層型データベース
階層をツリーで表現し管理する
RDB前はこちらが主流でRDB後は使わなくなった

システムの設計工程
１．要件定義
２．設計
３．開発
４．テスト

DOA data oriented approach
今主流
データ中心アプローチする考え
プログラムが来る前に設計を始める方法論
最初データありき

POA process oriented approach
昔主流
プロセス中心のアプローチ
プロセス１つに対してデータを集約させると不都合が起きるのでDOAが主流になった

スキーマ
DB設計ではデータ構造やフォーマットという意味合いでつかう
スキーマは３つのレベルで分けれる
１．外部スキーマ = ビューの世界 = ユーザーが見る
２．概念スキーマ = テーブの世界 = 開発者
３．内部スキーマ = ファイルの世界　= DBMS (物理配置)
以上を3層スキーマという
それぞれのスキーマが独立していると両者の変更にが互いに影響しないので柔軟性がある

三層スキーマなかったらどうなるか？
web3層モデルで考える
プレゼンテーション層 = webサーバー
アプリケーション層　= アプリケーション・サーバー
データ層 = データベースサーバー
※apacheやnginxはwebサーバーやアプリケーションサーバー同時になりたってるからイメージつけづらい
javaやmicrosoft系ならわかりやすい


昔は2層モデルでプレゼンテーション層とアプリケーション層がクライアント側にあった
欠点は3つ
1.ビジネスロジックに変更があった場合クライアントのプログラム更新が毎回必要
2.性能の貧弱なクライアントだと複雑な処理が追いつかない
3.サーバーとクライアントの通信量が多くネットワーク領域が少なかった昔は回線がボトルネックになった
このため三層になった
これと同じように三層スキーマーは独立性を考慮した作りであると色々と便利なことができた













