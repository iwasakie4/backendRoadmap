感想
画像がわかりやすい

プロキシ
アプリケーション層で動作するものは基本的にはプロキシと呼ぶ
以下プロキシ
・キャッシュ (ブラウザのキャッシュと同様に、キャッシュは公開または非公開にすることができます)
・フィルタリング (ウイルス対策スキャンやペアレンタル コントロールなど)
・負荷分散 (複数のサーバーが異なる要求を処理できるようにするため)
・認証 (さまざまなリソースへのアクセスを制御するため)
・ロギング (履歴情報の保存を可能にする)


HTTPの要求応答するためにはTCP接続確立をして通信を連続でする場合は常に開けている必要がある

HTTP により適した、より優れたトランスポート プロトコルを設計するための実験が進行中
UDP に基づいて構築された QUIC


以下は、HTTP で制御できる一般的な機能のリストです。

キャッシング: ドキュメントがキャッシュされる方法は、HTTP によって制御できます。サーバーはプロキシとクライアントに何をキャッシュするか、どのくらいの期間キャッシュするかを指示できます。クライアントは、保存されたドキュメントを無視するように中間キャッシュ プロキシに指示できます。

発信元の制約の緩和: スヌーピングやその他のプライバシーの侵害を防ぐために、Web ブラウザーは Web サイト間の厳密な分離を強制します。Web ページのすべての情報にアクセスできるのは、同じオリジンのページだけです。このような制約はサーバーにとって負担となりますが、HTTP ヘッダーはサーバー側でこの厳密な分離を緩和し、ドキュメントをさまざまなドメインからの情報のパッチワークにすることができます。そうするセキュリティ関連の理由さえあるかもしれません。

認証: 一部のページは、特定のユーザーのみがアクセスできるように保護されている場合があります。基本認証は、WWW-Authenticateおよび類似のヘッダーを使用するか、 HTTP Cookieを使用して特定のセッションを設定することにより、HTTP によって提供されます。

プロキシとトンネリング: 多くの場合、サーバーまたはクライアントはイントラネットに配置され、他のコンピューターから実際の IP アドレスを隠します。次に、HTTP 要求はプロキシを通過して、このネットワーク バリアを通過します。すべてのプロキシが HTTP プロキシであるとは限りません。たとえば、SOCKS プロトコルは下位レベルで動作します。ftp などの他のプロトコルは、これらのプロキシで処理できます。

セッション: HTTP Cookie を使用すると、リクエストをサーバーの状態に関連付けることができます。これにより、基本的な HTTP がステートレス プロトコルであるにもかかわらず、セッションが作成されます。これは、電子商取引のショッピング バスケットだけでなく、ユーザーが出力を構成できるサイトにも役立ちます。


HTTPフロー

TCP 接続を開く: TCP 接続は、1 つまたは複数の要求を送信し、応答を受信するために使用されます。
クライアントは、新しい接続を開くか、既存の接続を再利用するか、サーバーへの複数の TCP 接続を開くことができます。

HTTP メッセージを送信する: HTTP メッセージ (HTTP/2 より前) は人間が判読できます。HTTP/2 では、これらの単純なメッセージはフレームにカプセル化されるため、直接読み取ることはできませんが、原則は変わりません。例えば：

GET / HTTP/1.1
Host: developer.mozilla.org
Accept-Language: fr
クリップボードにコピー
次のように、サーバーから送信された応答を読み取ります。
HTTP/1.1 200 OK
Date: Sat, 09 Oct 2010 14:28:02 GMT
Server: Apache
Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
ETag: "51142bc1-7449-479b075b2891b"
Accept-Ranges: bytes
Content-Length: 29769
Content-Type: text/html

<!DOCTYPE html>… (here come the 29769 bytes of the requested web page)
クリップボードにコピー
以降の要求のために接続を閉じるか、再利用します。


HTTP パイプラインが有効になっている場合、最初の応答が完全に受信されるのを待たずに、いくつかの要求を送信できます。HTTP パイプラインは、古いソフトウェアが最新バージョンと共存する既存のネットワークに実装するのが難しいことがわかっています。HTTP パイプラインは HTTP/2 で置き換えられ、フレーム内のより堅牢な多重化リクエストが使用されています。

HTTP メッセージ
HTTP/1.1 以前で定義されている HTTP メッセージは、人間が判読できます。HTTP/2 では、これらのメッセージはバイナリ構造のフレームに埋め込まれ、ヘッダーの圧縮や多重化などの最適化が可能になります。元の HTTP メッセージの一部のみがこのバージョンの HTTP で送信された場合でも、各メッセージのセマンティクスは変更されず、クライアントは元の HTTP/1.1 要求を (仮想的に) 再構成します。したがって、HTTP/1.1 形式の HTTP/2 メッセージを理解することは役に立ちます。
HTTP/1.1では、ウェブサーバーに対して原則1つずつしかリクエストを送ることができません







